Drupal.behaviors.name185={attach:function attach(){function a(b){"@babel/helpers - typeof";return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},a(b)}function b(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function c(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,e(c.key),c)}function d(a,b,d){return b&&c(a.prototype,b),d&&c(a,d),Object.defineProperty(a,"prototype",{writable:!1}),a}function e(b){var c=f(b,"string");return"symbol"===a(c)?c:c+""}function f(b,c){if("object"!==a(b)||null===b)return b;var d=b[Symbol.toPrimitive];if(d!==void 0){var e=d.call(b,c||"default");if("object"!==a(e))return e;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===c?String:Number)(b)}(function b(a){"complete"===document.readyState||"interactive"===document.readyState?setTimeout(a,1):document.addEventListener("DOMContentLoaded",a)})(function(){// Toggle accordion class if the tabs have insufficient real estate.
function a(a){for(var b=a.parentElement,c=Array.from(a.querySelectorAll("button")),d=0,e=0;e<c.length;e++)d+=parseInt(c[e].offsetWidth,10);d>=b.clientWidth?b.classList.add("tabs--as-accordion"):b.classList.remove("tabs--as-accordion")}// Determine if tabs should convert to "accordion" layout on resize.
var c=function(){function a(c){var d=this;// If we have a matching preset element, determine if the hash id
// belongs to the "tab" itself, or an element in the tab panel.
if(b(this,a),this.tablistNode=c,this.tabs=[],this.firstTab=null,this.lastTab=null,this.tabs=Array.from(this.tablistNode.querySelectorAll("[role=tab]")),this.tabpanels=[],this.preselectedTab=null,this.presetId=window.location.hash?window.location.hash.substring(1):null,this.preselectedContentFound=null,this.tabs.forEach(function(a){var b=document.getElementById(a.getAttribute("aria-controls"));a.tabIndex=-1,a.setAttribute("aria-selected","false"),d.tabpanels.push(b),a.addEventListener("keydown",d.onKeydown.bind(d)),a.addEventListener("click",d.onClick.bind(d)),d.firstTab||(d.firstTab=a),d.lastTab=a}),this.presetId&&(this.preselectedContentFound=document.getElementById(this.presetId)),this.preselectedContentFound)// If the preselected element is not a button, then the content
// is inside of tab panel and not the specific tab itself.
if("BUTTON"!==this.preselectedContentFound.tagName){var e=this.preselectedContentFound.closest("details");if(e.id){var f=e.id.replace("tabpanel-","tab-");this.preselectedTab=document.getElementById(f)}}// In this case, the preselected element is the tab itself.
else this.preselectedTab=this.preselectedContentFound;// Set the selected tab element (defaults to first item, if no
// preset item is detected from the url hash id.
this.setSelectedTab(this.preselectedTab?this.preselectedTab:this.firstTab),this.preselectedContentFound&&this.preselectedContentFound.scrollIntoView()}return d(a,[{key:"setSelectedTab",value:function b(a){this.tabs.forEach(function(b){var c=b.id.replace("tab-","tabpanel-"),d=document.getElementById(c);a===b?(b.setAttribute("aria-selected","true"),b.classList.add("active"),b.removeAttribute("tabindex"),d.open=!0):(b.setAttribute("aria-selected","false"),b.classList.remove("active"),b.tabIndex=-1,d.open=!1)})}},{key:"moveFocusToTab",value:function b(a){a.focus()}},{key:"moveFocusToPreviousTab",value:function b(a){var c;a===this.firstTab?this.moveFocusToTab(this.lastTab):(c=this.tabs.indexOf(a),this.moveFocusToTab(this.tabs[c-1]))}},{key:"moveFocusToNextTab",value:function b(a){var c;a===this.lastTab?this.moveFocusToTab(this.firstTab):(c=this.tabs.indexOf(a),this.moveFocusToTab(this.tabs[c+1]))}},{key:"onKeydown",value:function b(a){var c=a.currentTarget,d=!1;switch(a.key){case"ArrowLeft":this.moveFocusToPreviousTab(c),d=!0;break;case"ArrowRight":this.moveFocusToNextTab(c),d=!0;break;case"Home":this.moveFocusToTab(this.firstTab),d=!0;break;case"End":this.moveFocusToTab(this.lastTab),d=!0;break;default:}d&&(a.stopPropagation(),a.preventDefault())}},{key:"onClick",value:function b(a){this.setSelectedTab(a.currentTarget)}}]),a}(),e=new ResizeObserver(function(b){b.forEach(function(b){a(b.target)})}),f=document.querySelectorAll(".tabs [role=tablist]");f.forEach(function(a){a.classList.contains("js-tabs__tablist")||(a.classList.add("js-tabs__tablist"),new c(a),e.observe(a))})})}};